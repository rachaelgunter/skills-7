Discussion
----------

1. Which would be the most efficient data structure for a data set with the
   following requirements:

  - frequently removing and adding items to the beginning of the data structure

  - frequently removing and adding items to the end of the data structure

  - rarely indexing and searching

  A. A Python list B. Singly linked list C. Doubly linked list

  Explain your answer.

singly linked list since you can easily append a node to the end by 
adding a tail  or a head 






2. Which would be the most efficient data structure for a data set with the
   following requirements:

  - order is unimportant

  -frequently adding and removing items

  - frequently looking up items

  A. A Python list  B. A Dictionary  C. Deque  D. Binary Search Tree

  Explain your answer.

a dictionary because they are in no particular order and you dont have to go 
through each item iteratvely in order to find a particular item






3. Explain why looking up, adding elements, and removing elements from a 
   dictionary or hash map are all O(1) operations.
because you dont have to iterate through the entire list to add or remove 






4. Explain why removing elements from or adding elements to an arbitrary
   location in a Python list are O(n) operations.

because the longer you do it the more time it takes?
what? lol





5. What is the correct runtime for:

  - Bubble Sort?

  O(n2)

  - Quicksort?

  O(n log n)

  - Merge Sort?

  O(n log n)/ O(n)

  - Insertion Sort?
  O(n)O(n)

6. What is the difference between a tree and a graph?





7. Using the Python implementation of Quicksort from the instructions:

  Given the list [8, 4, 1, 6, 5, 2, 7, 3]:
  When this function is initially called, what are the values of:

    - lst - [8, 4, 1, 6, 5, 2, 7, 3]

    - pivot - 3

    - lo - 1, 2

    - hi - 4, 5, 6, 7, 8



  When the quicksort is first called recursively on the `lo` list, what are the
  values of:

  - lst - 1, 2, 3

  - pivot - 7

  - lo - 1, 2, 3, 4, 5, 6

  - hi - 8
